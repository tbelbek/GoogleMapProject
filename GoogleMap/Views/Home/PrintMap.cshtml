@using WebGrease.Css.Ast.MediaQuery
@model GoogleMap.Models.EventPlanViewModel

@{
    ViewBag.Title = "Home Page";
    Layout = "";
}

<div class="page-content">
    <div class="container-fluid">
        <div class="row">
            <div id="map" style="height: 800px; width: 1200px;"></div>
        </div>
    </div>
</div>


<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDxiKzM-pTcrZncz3E4am4tOtWTv2b4mV8&signed_in=true&callback=initMap"
        async defer></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="~/Scripts/latlon-spherical.js"></script>
<script src="~/Scripts/dms.js"></script>
<script>
    var map;
    var directionsDefault = [];
    var routeWaypts = [];
    var waypts = [];
    var markers = [];
    var eventDetails = {};
    var aPoint = {};
    var bPoint = {};
    var allStopProperties = [];
    var originAndDestMarkers = [];
    var dynamicStops = [];
    var wayPoints = [];
    var preEventResult = {};
    var responseGlobal = {};
    function initMap() {


        

        var directionsService = new window.google.maps.DirectionsService;
        var directionsDisplay = new window.google.maps.DirectionsRenderer({ draggable: false, suppressMarkers: true });
        map = new window.google.maps.Map(document.getElementById('map'), {
            center: { lat: 41.005811774870615, lng: 28.98914337158203 },
            zoom: 12,
            disableDefaultUI: true,
            scrollwheel: false,
            navigationControl: false,
            mapTypeControl: false,
            scaleControl: false,
            draggable: false,
        });

        var centerControlDiv = document.createElement('div');
        var centerControl = new CenterControl(centerControlDiv, map,'@Model.Name');

        centerControlDiv.index = 1;
        map.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControlDiv);
        directionsDisplay.setMap(map);

        $.ajax({
            method: "GET",
            url: "/Home/EventGet/" + @Model.Id,
            success: function(preEventResult) {
                if (preEventResult != null) {

                    preCalculateAndDisplayRoute(directionsService, directionsDisplay, map, preEventResult);
                }

            }
        });



        google.maps.event.addDomListener(window, "resize", function() {
            var center = map.getCenter();
            google.maps.event.trigger(map, "resize");
            map.setCenter(center);
        });






    }



    function setDirections(result, aPoint, bPoint) {
        if (!(result.routes[0].overview_path[0].lat() == aPoint.lat && result.routes[0].overview_path[0].lng() == aPoint.lng)) {
            document.getElementById('start').value = result.routes[0].overview_path[0].lat() + ", " + result.routes[0].overview_path[0].lng();
        }

        if (!(result.routes[0].overview_path[result.routes[0].overview_path.length - 1].lat() == bPoint.lat && result.routes[0].overview_path[result.routes[0].overview_path.length - 1].lng() == bPoint.lng)) {
            document.getElementById('end').value = result.routes[0].overview_path[result.routes[0].overview_path.length - 1].lat() + ", " + result.routes[0].overview_path[result.routes[0].overview_path.length - 1].lng();
        }

        if ((result.routes[0].overview_path[0].lat() == aPoint.lat && result.routes[0].overview_path[0].lng() == aPoint.lng) && (result.routes[0].overview_path[result.routes[0].overview_path.length - 1].lat() == bPoint.lat && result.routes[0].overview_path[result.routes[0].overview_path.length - 1].lng() == bPoint.lng) && (result.request.waypoints.length > 0)) {
            routeWaypts = [];
            wayPoints = [];
            if(result.request.waypoints.length > 8) {
                alert("Maksimum 8 waypoint seçebilirsiniz.");
            } else {
                for (var kp = 0; kp < result.request.waypoints.length; kp++) {
                    routeWaypts.push({
                        location: result.request.waypoints[kp].location,
                        stopover: true
                    });

                    var wayPoint = {};

                    wayPoint.EventId = @Model.Id;
                    wayPoint.WaypointX = result.request.waypoints[kp].location.lat() + '';
                    wayPoint.WaypointY = result.request.waypoints[kp].location.lng() + '';

                    wayPoints.push(wayPoint);
                    if(wayPoints.length == 8) {
                        $("#waypointsCount").text("Waypoint Sayısı: " + wayPoints.length + ". Maksimum Sayıya Ulaştınız!");
                    } else {
                        $("#waypointsCount").text("Waypoint Sayısı: " + wayPoints.length);
                    }
                }
            }
        }


    }

    function addStop(lat, lng, waypointDistance, map, stopTypeId) {
        var geocoder = new google.maps.Geocoder;
        waypt = {};

        var positionModel = new google.maps.LatLng(lat, lng);

        var id = stopTypeId;

        if(stopTypeId == "") {
            id = parseInt($('input[name="chooseMarkerLocation"]:checked').val());
        }

        var stopProperty;

        for (var sp = 0; sp < allStopProperties.length; sp++) {
            if (allStopProperties[sp].Id === parseInt(id)) {
                stopProperty = allStopProperties[sp];
                break;
            }
        }

        var marker = new google.maps.Marker({
            position: positionModel,
            title: stopProperty.Name + "_" + id,
            animation: google.maps.Animation.DROP,
            draggable: false,
            icon: stopProperty.IconUrl
        });

        marker.setMap(map);

        markers.push(marker);

        marker.addListener('dragstart', function (event) {
            waypt.milestone = this.title;
        });

        //markerların sürükleme sonrası lokasyonları ve ana marker listesinin güncellenmesi. console.loglar 2 marker arasındaki farkı göstermektedir.
        marker.addListener('dragend', function (event) {
            removeStop(marker.position.lat(), marker.position.lng(), waypt.milestone);
            addStop(this.position.lat(), this.position.lng(), waypt.milestone.split("_")[0], map, waypt.milestone.split("_")[1]);

            for (var l = 0, len = directionsDefault.length; l < len; l++) {
                if (directionsDefault[l].milestone == waypt.milestone) {
                    directionsDefault[l].latitude = waypt.latAfter;
                    directionsDefault[l].longitude = waypt.lngAfter;
                }
            }
        });


    }

    function addStopFromJson(stop,map) {
        var geocoder = new google.maps.Geocoder;
        waypt = {};

        var positionModel = new google.maps.LatLng(stop.CoordinateX, stop.CoordinateY);

        var id = stop.StopId;





        var marker = new google.maps.Marker({
            position: positionModel,
            title: stop.Name + "_" + id,
            draggable: false,
            icon: stop.IconUrl
        });

        marker.setMap(map);

        markers.push(marker);

        marker.addListener('dragstart', function (event) {
            waypt.milestone = this.title;
        });

        //markerların sürükleme sonrası lokasyonları ve ana marker listesinin güncellenmesi. console.loglar 2 marker arasındaki farkı göstermektedir.
        marker.addListener('dragend', function (event) {
            removeStop(marker.position.lat(), marker.position.lng(), waypt.milestone);
            addStop(this.position.lat(), this.position.lng(), waypt.milestone.split("_")[0], map, waypt.milestone.split("_")[1]);

            for (var l = 0, len = directionsDefault.length; l < len; l++) {
                if (directionsDefault[l].milestone == waypt.milestone) {
                    directionsDefault[l].latitude = waypt.latAfter;
                    directionsDefault[l].longitude = waypt.lngAfter;
                }
            }
        });


    }

    function addDynamicStop(lat, lng, stopDistance, map, dynamicStop) {
        var geocoder = new google.maps.Geocoder;
        var dynStop = dynamicStop;
        var id = parseInt(dynamicStop.ID);
        var stopProperty;

        for (var sp = 0; sp < allStopProperties.length; sp++) {
            if (allStopProperties[sp].Id === id) {
                stopProperty = allStopProperties[sp];
                break;
            }
        }

        var positionModel = new google.maps.LatLng(lat, lng);
        var marker = new google.maps.Marker({
            position: positionModel,
            animation: google.maps.Animation.DROP,
            title:  stopProperty.Name + "_" + stopDistance,
            draggable: false,
            icon: stopProperty.IconUrl
        });

        marker.setMap(map);

        markers.push(marker);
        waypt = {};

        marker.addListener('dragstart', function (event) {
            waypt.milestone = this.title;
        });

        marker.addListener('dragend', function (event) {
            removeStop(marker.position.lat(), marker.position.lng(), waypt.milestone);
            addDynamicStop(this.position.lat(), this.position.lng(), waypt.milestone.split('_')[1], map, dynStop);

            for (var l = 0, len = directionsDefault.length; l < len; l++) {
                if (directionsDefault[l].milestone == waypt.milestone) {
                    directionsDefault[l].latitude = waypt.latAfter;
                    directionsDefault[l].longitude = waypt.lngAfter;
                }
            }
        });





    }

    function removeStop(lat, lng, title) {
        var i = 0;

        for (i = 0; i < markers.length; i++) {
            if(markers[i].position.lat() == lat && markers[i].position.lng() == lng && markers[i].title == title) {
                markers[i].setMap(null);
                markers.splice(i, 1);
                break;
            }
        }
    }




    function preCalculateAndDisplayRoute(directionsService, directionsDisplay, map, eventObject) {
        waypts = [];
        if (eventObject.Waypoints!=null) {
            for (var wpt = 0; wpt < eventObject.Waypoints.length; wpt++) {
                waypts.push({
                    location: eventObject.Waypoints[wpt].WaypointX + ', ' + eventObject.Waypoints[wpt].WaypointY,
                    stopover: true
                });
            }
        }

        var start = eventObject.StartX + ', ' + eventObject.StartY;
        var end = eventObject.EndX + ', ' + eventObject.EndY;
        directionsService.route({
            origin: start,
            destination: end,
            waypoints: waypts,
            travelMode: google.maps.TravelMode.DRIVING
        }, function (response, status) {
            if (status === google.maps.DirectionsStatus.OK) {


                responseGlobal = response;
                removeMarkers();
                for (var stp = 0; stp < eventObject.Stops.length; stp++) {
                    addStopFromJson(eventObject.Stops[stp], map);
                }
                makeMarker( start, "http://wfarm4.dataknet.com/static/resources/icons/set4/c42fa105656.png", "Başlangıç", map, true);
                makeMarker( end, "http://www.veryicon.com/icon/32/System/iOS7%20Minimal/Sports%20Finish%20flag.png", 'Bitiş', map, false);



                // +- uzaklık büyüdükçe büyüyecek bir sapma oluşuyor.
                if(response) {
                    directionsDisplay.setDirections(response);
                    responseGlobal = response;
                }

                setTimeout(function() {
                    window.print();
                }, 2000);

            } else {
                window.alert('Directions request failed due to ' + status);
            }
        });
    }

    function removeMarkers() {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }

        markers = [];
    }



    function makeMarker(position, icon, title, map, startOrEnd) {
        var geocoder = new google.maps.Geocoder;
        var pos = position.split(", ");
        var positionModel = new google.maps.LatLng(pos[0], pos[1]);
        var marker = new google.maps.Marker({
            position: positionModel,
            icon: icon,
            title: title,
            draggable: false
        });

        marker.setMap(map);

        marker.addListener('dragend', function (event) {
            var latlng = {lat: parseFloat(this.position.lat()), lng: parseFloat(this.position.lng())};

            if (startOrEnd) {
                $('#start').val(this.position.lat() + ", " + this.position.lng());

                geocoder.geocode({'location': latlng}, function(results, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        if (results[0]) {
                            $('#startName').val(results[0].formatted_address);
                        }
                    } else {
                        window.alert('Geocoder failed due to: ' + status);
                    }
                });
            } else {
                $('#end').val(this.position.lat() + ", " + this.position.lng());

                geocoder.geocode({'location': latlng}, function(results, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        if (results[0]) {
                            $('#endName').val(results[0].formatted_address);
                        }
                    } else {
                        window.alert('Geocoder failed due to: ' + status);
                    }
                });
            }
        });

        originAndDestMarkers.push(marker);
    }

    function removeWaypoints() {
        routeWaypts = [];
        wayPoints = [];
        $("#waypointsCount").text("");
    }


    function CenterControl(controlDiv, map, eventName) {
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
        controlUI.style.marginBottom = '22px';
        controlUI.style.textAlign = 'center';
        controlDiv.appendChild(controlUI);

        var controlText = document.createElement('div');
        controlText.style.color = 'rgb(25,25,25)';
        controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
        controlText.style.fontSize = '16px';
        controlText.style.lineHeight = '38px';
        controlText.style.paddingLeft = '5px';
        controlText.style.paddingRight = '5px';
        controlText.innerHTML = eventName;
        controlUI.appendChild(controlText);
    }


</script>

